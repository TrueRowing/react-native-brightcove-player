package jp.manse;

import android.os.Bundle;
import android.support.annotation.NonNull;
import android.text.format.Formatter;
import android.util.Log;

import com.brightcove.player.edge.OfflineCatalog;
import com.brightcove.player.edge.VideoListener;
import com.brightcove.player.event.Event;
import com.brightcove.player.model.Video;
import com.brightcove.player.network.DownloadStatus;
import com.brightcove.player.offline.MediaDownloadable;
import com.brightcove.player.view.BrightcoveExoPlayerVideoView;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import jp.manse.utils.BrightcoveDownloadUtil;

public class BrightcoveOfflineModule extends ReactContextBaseJavaModule {

    /**
     * The name that will be used to tag the events generated by this class.
     */
    private static final String TAG = BrightcoveOfflineModule.class.getSimpleName();

    /**
     * Reference to the video cloud catalog client
     */
    private OfflineCatalog catalog;

    /**
     * Reference to the Brightcove player used to download videos
     */
    private BrightcoveExoPlayerVideoView playerVideoView;

    /**
     * Constructor
     * @param reactContext The application context for the React Native application
     */
    BrightcoveOfflineModule(ReactApplicationContext reactContext) {
        super(reactContext);
    }

    @Override public void finalize() {
        if (this.catalog != null) {
            this.catalog.removeDownloadEventListener(this.downloadEventListener);
        }
    }

    //////////////////////////////////////////////
    // React Native module JavaScript interface //
    //////////////////////////////////////////////

    /**
     * In Javascript: const { BrightcoveOffline } = NativeModules
     * */
    @Override
    public String getName() {
        return "BrightcoveOffline";
    }

    /**
     * In Javascript: await BrightcoveOffline.init(accountID, policyKey)
     *
     * @param accountID The Brightcove account ID for accessing the videos
     * @param policyKey The Brightcove policy key
     * @param promise React Native passes a Promise into the method, used to resolve the value
     */
    @ReactMethod
    void init(String accountID, String policyKey, Promise promise) {
        if (this.catalog != null) {
            promise.resolve(null);
        } else {
            this.playerVideoView = new BrightcoveExoPlayerVideoView(getReactApplicationContext());
            this.playerVideoView.finishInitialization();
            this.catalog = new OfflineCatalog(
                this.getReactApplicationContext(),
                this.playerVideoView.getEventEmitter(),
                accountID,
                policyKey
            );
            this.catalog.addDownloadEventListener(this.downloadEventListener);
            // Configure downloads through the catalog
            this.catalog.setMobileDownloadAllowed(true);
            this.catalog.setMeteredDownloadAllowed(false);
            this.catalog.setRoamingDownloadAllowed(false);
            promise.resolve(null);
        }
    }

    /**
     * In Javascript: await BrightcoveOffline.downloadVideo(videoID)
     *
     * @param videoId The ID of the video to download
     * @param promise React Native passes a Promise into the method, used to resolve the value
     */
    @ReactMethod
    public void downloadVideo(@NonNull final String videoId, final Promise promise) {
        if (this.catalog == null) {
            promise.reject(new Exception("BrightcoveOffline has not been initialized"));
            return;
        }
        this.catalog.findVideoByID(videoId, new VideoListener() {
            @Override
            public void onVideo(final Video video) {
                // bundle has all available captions and audio tracks
                BrightcoveOfflineModule.this.catalog.getMediaFormatTracksAvailable(
                    video,
                    new MediaDownloadable.MediaFormatListener() {
                    @Override
                    public void onResult(MediaDownloadable mediaDownloadable, Bundle bundle) {
                        BrightcoveDownloadUtil.selectMediaFormatTracksAvailable(
                            mediaDownloadable,
                            bundle
                        );
                        try {
                            BrightcoveOfflineModule.this.catalog.downloadVideo(video);
                            promise.resolve(null);
                        } catch (IllegalStateException iSE) {
                            String message = "Exception when downloading video " + video.getId();
                            android.util.Log.w(BrightcoveOfflineModule.TAG, message, iSE);
                            promise.reject(new Exception(message + ": " + iSE.getMessage()));
                        }
                    }
                });
            }
            @Override
            public void onError(String error) {
                promise.reject(new Exception("Video not found " + videoId + " " + error));
            }
        });
    }

    @ReactMethod
    public void pauseVideoDownload(@NonNull final String videoId, final Promise promise) {
        if (catalog == null) {
            promise.reject(new Exception("BrightcoveOffline has not been initialized"));
            return;
        }
        try {
            this.catalog.pauseVideoDownload(videoId);
            promise.resolve(null);
        } catch (Exception ex) {
            promise.reject(new Exception("Video not found " + videoId));
        }
    }

    @ReactMethod
    public void resumeVideoDownload(@NonNull final String videoId, final Promise promise) {
        if (this.catalog == null) {
            promise.reject(new Exception("BrightcoveOffline has not been initialized"));
            return;
        }
        try {
            this.catalog.resumeVideoDownload(videoId);
            promise.resolve(null);
        } catch (Exception ex) {
            promise.reject(new Exception("Video not found " + videoId));
        }
    }

    @ReactMethod
    public void deleteVideo(@NonNull final String videoId, final Promise promise) {
        if (this.catalog == null) {
            promise.reject(new Exception("BrightcoveOffline has not been initialized"));
            return;
        }
        try {
            this.catalog.deleteVideo(videoId);
            promise.resolve(null);
        } catch (Exception ex) {
            promise.reject(new Exception("Video not found " + videoId));
        }
    }

    /**
     * JavaScript events this React Native module emits, e.g.
     * DeviceEventEmitter.addListener(
     *     BrightcoveOffline.DownloadRequested,
     *     this.onDownloadRequested,
     * )
     */
    private static final String DOWNLOAD_REQUESTED = "DownloadRequested";
    private static final String DOWNLOAD_STARTED = "DownloadStarted";
    private static final String DOWNLOAD_PROGRESS = "DownloadProgress";
    private static final String DOWNLOAD_PAUSED = "DownloadPaused";
    private static final String DOWNLOAD_COMPLETED = "DownloadCompleted";
    private static final String DOWNLOAD_CANCELED = "DownloadCanceled";
    private static final String DOWNLOAD_DELETED = "DownloadDeleted";
    private static final String DOWNLOAD_FAILED = "DownloadFailed";
    @Override public Map<String, Object> getConstants() {
        HashMap<String, Object> map = new HashMap<>();
        map.put(BrightcoveOfflineModule.DOWNLOAD_REQUESTED, BrightcoveOfflineModule.DOWNLOAD_REQUESTED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_STARTED, BrightcoveOfflineModule.DOWNLOAD_STARTED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_PROGRESS, BrightcoveOfflineModule.DOWNLOAD_PROGRESS);
        map.put(BrightcoveOfflineModule.DOWNLOAD_PAUSED, BrightcoveOfflineModule.DOWNLOAD_PAUSED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_COMPLETED, BrightcoveOfflineModule.DOWNLOAD_COMPLETED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_CANCELED, BrightcoveOfflineModule.DOWNLOAD_CANCELED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_DELETED, BrightcoveOfflineModule.DOWNLOAD_DELETED);
        map.put(BrightcoveOfflineModule.DOWNLOAD_FAILED, BrightcoveOfflineModule.DOWNLOAD_FAILED);
        return map;
    }

    /////////////////////
    // Event Listeners //
    /////////////////////

    /**
     * Implements a {@link com.brightcove.player.offline.MediaDownloadable.DownloadEventListener}
     * that will emit messages about the download status.
     */
    private final MediaDownloadable.DownloadEventListener downloadEventListener =
        new MediaDownloadable.DownloadEventListener()
    {

        @Override
        public void onDownloadRequested(@NonNull final Video video) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                "Starting to process '%s' video download request",
                video.getName()
            ));
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_REQUESTED,
                video.getName()
            );
        }

        @Override
        public void onDownloadStarted(
            @NonNull Video video,
            long estimatedSize,
            @NonNull Map<String, Serializable> mediaProperties
        ) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                    "Started to download '%s' video. Estimated = %s, width = %s, height = %s, mimeType = %s",
                    video.getName(),
                    Formatter.formatFileSize(
                        BrightcoveOfflineModule.this.getReactApplicationContext(),
                        estimatedSize
                    ),
                    mediaProperties.get(Event.RENDITION_WIDTH),
                    mediaProperties.get(Event.RENDITION_HEIGHT),
                    mediaProperties.get(Event.RENDITION_MIME_TYPE)
            ));
            WritableNativeMap info = new WritableNativeMap();
            info.putString("videoID", video.getId());
            info.putDouble("estimatedSize", estimatedSize);
            info.putString("width", Event.RENDITION_WIDTH);
            info.putString("height", Event.RENDITION_HEIGHT);
            info.putString("mimeType", Event.RENDITION_MIME_TYPE);
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_STARTED,
                info
            );
        }

        @Override
        public void onDownloadProgress(
            @NonNull final Video video,
            @NonNull final DownloadStatus status
        ) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                    "Downloaded %s out of %s of '%s' video. Progress %3.2f",
                    Formatter.formatFileSize(
                        BrightcoveOfflineModule.this.getReactApplicationContext(),
                        status.getBytesDownloaded()
                    ),
                    Formatter.formatFileSize(
                        BrightcoveOfflineModule.this.getReactApplicationContext(),
                        status.getMaxSize()
                    ),
                    video.getName(), status.getProgress()
            ));
            WritableNativeMap progress = new WritableNativeMap();
            progress.putString("videoID", video.getId());
            progress.putDouble("bytesDownloaded", status.getBytesDownloaded());
            progress.putDouble("maxSize", status.getMaxSize());
            progress.putDouble("progress", status.getProgress());
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_PROGRESS,
                progress
            );
        }

        @Override
        public void onDownloadPaused(
            @NonNull final Video video,
            @NonNull final DownloadStatus status
        ) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                    "Paused download of '%s' video: Reason #%d",
                    video.getName(),
                    status.getReason()
            ));
            WritableNativeMap pause = new WritableNativeMap();
            pause.putString("videoID", video.getId());
            pause.putDouble("reason", status.getReason());
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_PAUSED,
                pause
            );
        }

        @Override
        public void onDownloadCompleted(
            @NonNull final Video video,
            @NonNull final DownloadStatus status
        ) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                    "Successfully saved '%s' video",
                    video.getName()
            ));
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_COMPLETED,
                video.getName()
            );
        }

        @Override
        public void onDownloadCanceled(@NonNull final Video video) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                "Cancelled download of '%s' video removed",
                video.getName()
            ));
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_CANCELED,
                video.getName()
            );
        }

        @Override
        public void onDownloadDeleted(@NonNull final Video video) {
            Log.i(BrightcoveOfflineModule.TAG, String.format(
                "Offline copy of '%s' video removed",
                video.getName()
            ));
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_DELETED,
                video.getName()
            );
        }

        @Override
        public void onDownloadFailed(
            @NonNull final Video video,
            @NonNull final DownloadStatus status
        ) {
            Log.e(BrightcoveOfflineModule.TAG, String.format(
                    "Failed to download '%s' video: Error #%d",
                    video.getName(),
                    status.getReason()
            ));
            WritableNativeMap failure = new WritableNativeMap();
            failure.putString("videoID", video.getId());
            failure.putDouble("reason", status.getReason());
            BrightcoveOfflineModule.this.getEmitter().emit(
                BrightcoveOfflineModule.DOWNLOAD_FAILED,
                failure
            );
        }
    };

    /////////////
    // Helpers //
    /////////////

    private DeviceEventManagerModule.RCTDeviceEventEmitter _emitter = null;
    private DeviceEventManagerModule.RCTDeviceEventEmitter getEmitter() {
        if (this._emitter == null) {
            this._emitter = this.getReactApplicationContext().getJSModule(
                DeviceEventManagerModule.RCTDeviceEventEmitter.class
            );
        }
        return this._emitter;
    }
}
